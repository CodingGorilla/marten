<error errorId="fe2cb853-8424-4e1f-88fc-e2db2d8c65a7" application="/LM/W3SVC/2/ROOT" host="CGPC" type="System.InvalidOperationException" message="Compilation failures!&#xA;&#xA;CS1002: ; expected&#xA;CS0177: The out parameter 'assigned' must be assigned to before control leaves the current method&#xA;&#xA;Code:&#xA;&#xA;using DinnerParty.Models;&#xD;&#xA;using Marten;&#xD;&#xA;using Marten.Linq;&#xD;&#xA;using Marten.Schema;&#xD;&#xA;using Marten.Services;&#xD;&#xA;using Marten.Util;&#xD;&#xA;using Npgsql;&#xD;&#xA;using NpgsqlTypes;&#xD;&#xA;using Remotion.Linq;&#xD;&#xA;using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Data.Common;&#xD;&#xA;using System.Threading;&#xD;&#xA;using System.Threading.Tasks;&#xD;&#xA;&#xD;&#xA;namespace Marten.GeneratedCode&#xD;&#xA;{&#xD;&#xA;&#xD;&#xA;    public class DinnerStorage : Resolver&lt;Dinner&gt;, IDocumentStorage, IBulkLoader&lt;Dinner&gt;, IdAssignment&lt;Dinner&gt;, IResolver&lt;Dinner&gt;&#xD;&#xA;    {&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public DinnerStorage() &#xD;&#xA;        {&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public Type DocumentType =&gt; typeof (Dinner);&#xD;&#xA;&#xD;&#xA;        public NpgsqlCommand UpsertCommand(object document, string json)&#xD;&#xA;        {&#xD;&#xA;            return UpsertCommand((Dinner)document, json);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public NpgsqlCommand LoaderCommand(object id)&#xD;&#xA;        {&#xD;&#xA;            return new NpgsqlCommand(&quot;select data, id from public.mt_doc_dinner as d where id = :id&quot;).With(&quot;id&quot;, id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public NpgsqlCommand DeleteCommandForId(object id)&#xD;&#xA;        {&#xD;&#xA;            return new NpgsqlCommand(&quot;delete from public.mt_doc_dinner where id = :id&quot;).With(&quot;id&quot;, id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public NpgsqlCommand DeleteCommandForEntity(object entity)&#xD;&#xA;        {&#xD;&#xA;            return DeleteCommandForId(((Dinner)entity).Id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public NpgsqlCommand LoadByArrayCommand&lt;T&gt;(T[] ids)&#xD;&#xA;        {&#xD;&#xA;            return new NpgsqlCommand(&quot;select data, id from public.mt_doc_dinner as d where id = ANY(:ids)&quot;).With(&quot;ids&quot;, ids);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public void Remove(IIdentityMap map, object entity)&#xD;&#xA;        {&#xD;&#xA;            var id = Identity(entity);&#xD;&#xA;            map.Remove&lt;Dinner&gt;(id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public void Delete(IIdentityMap map, object id)&#xD;&#xA;        {&#xD;&#xA;            map.Remove&lt;Dinner&gt;(id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public void Store(IIdentityMap map, object id, object entity)&#xD;&#xA;        {&#xD;&#xA;            map.Store&lt;Dinner&gt;(id, (Dinner)entity);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public object Assign(Dinner document, out bool assigned)&#xD;&#xA;        {&#xD;&#xA;            document.Id = &quot;4ff5775a51bd49ef8da0ae9f58d606b2&quot;&#xD;&#xA;            return document.Id;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public void Assign(Dinner document, object id)&#xD;&#xA;        {&#xD;&#xA;            document.Id = (System.String)id;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public object Retrieve(Dinner document)&#xD;&#xA;        {&#xD;&#xA;            return document.Id;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public NpgsqlDbType IdType =&gt; NpgsqlDbType.Text;&#xD;&#xA;&#xD;&#xA;        public object Identity(object document)&#xD;&#xA;        {&#xD;&#xA;            return ((Dinner)document).Id;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public void RegisterUpdate(UpdateBatch batch, object entity)&#xD;&#xA;        {&#xD;&#xA;            var document = (Dinner)entity;&#xD;&#xA;            var function = new FunctionName(&quot;public&quot;, &quot;mt_upsert_dinner&quot;);&#xD;&#xA;            batch.Sproc(function).JsonEntity(&quot;doc&quot;, document).Param(&quot;docId&quot;, document.Id, NpgsqlDbType.Text);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public void RegisterUpdate(UpdateBatch batch, object entity, string json)&#xD;&#xA;        {&#xD;&#xA;            var document = (Dinner)entity;&#xD;&#xA;            var function = new FunctionName(&quot;public&quot;, &quot;mt_upsert_dinner&quot;);&#xD;&#xA;            batch.Sproc(function).JsonBody(&quot;doc&quot;, json).Param(&quot;docId&quot;, document.Id, NpgsqlDbType.Text);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public void Load(ISerializer serializer, NpgsqlConnection conn, IEnumerable&lt;Dinner&gt; documents)&#xD;&#xA;        {&#xD;&#xA;            using (var writer = conn.BeginBinaryImport(&quot;COPY public.mt_doc_dinner(\&quot;data\&quot;, \&quot;id\&quot;) FROM STDIN BINARY&quot;))&#xD;&#xA;            {&#xD;&#xA;                foreach (var x in documents)&#xD;&#xA;                {&#xD;&#xA;                    bool assigned = false;&#xD;&#xA;                    Assign(x, out assigned);&#xD;&#xA;                    writer.StartRow();&#xD;&#xA;                    writer.Write(serializer.ToJson(x), NpgsqlDbType.Jsonb);&#xD;&#xA;                    writer.Write(x.Id, NpgsqlDbType.Text);&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;" source="Marten" detail="System.InvalidOperationException: Compilation failures!&#xA;&#xA;CS1002: ; expected&#xA;CS0177: The out parameter 'assigned' must be assigned to before control leaves the current method&#xA;&#xA;Code:&#xA;&#xA;using DinnerParty.Models;&#xD;&#xA;using Marten;&#xD;&#xA;using Marten.Linq;&#xD;&#xA;using Marten.Schema;&#xD;&#xA;using Marten.Services;&#xD;&#xA;using Marten.Util;&#xD;&#xA;using Npgsql;&#xD;&#xA;using NpgsqlTypes;&#xD;&#xA;using Remotion.Linq;&#xD;&#xA;using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Data.Common;&#xD;&#xA;using System.Threading;&#xD;&#xA;using System.Threading.Tasks;&#xD;&#xA;&#xD;&#xA;namespace Marten.GeneratedCode&#xD;&#xA;{&#xD;&#xA;&#xD;&#xA;    public class DinnerStorage : Resolver&lt;Dinner&gt;, IDocumentStorage, IBulkLoader&lt;Dinner&gt;, IdAssignment&lt;Dinner&gt;, IResolver&lt;Dinner&gt;&#xD;&#xA;    {&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public DinnerStorage() &#xD;&#xA;        {&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public Type DocumentType =&gt; typeof (Dinner);&#xD;&#xA;&#xD;&#xA;        public NpgsqlCommand UpsertCommand(object document, string json)&#xD;&#xA;        {&#xD;&#xA;            return UpsertCommand((Dinner)document, json);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public NpgsqlCommand LoaderCommand(object id)&#xD;&#xA;        {&#xD;&#xA;            return new NpgsqlCommand(&quot;select data, id from public.mt_doc_dinner as d where id = :id&quot;).With(&quot;id&quot;, id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public NpgsqlCommand DeleteCommandForId(object id)&#xD;&#xA;        {&#xD;&#xA;            return new NpgsqlCommand(&quot;delete from public.mt_doc_dinner where id = :id&quot;).With(&quot;id&quot;, id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public NpgsqlCommand DeleteCommandForEntity(object entity)&#xD;&#xA;        {&#xD;&#xA;            return DeleteCommandForId(((Dinner)entity).Id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public NpgsqlCommand LoadByArrayCommand&lt;T&gt;(T[] ids)&#xD;&#xA;        {&#xD;&#xA;            return new NpgsqlCommand(&quot;select data, id from public.mt_doc_dinner as d where id = ANY(:ids)&quot;).With(&quot;ids&quot;, ids);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public void Remove(IIdentityMap map, object entity)&#xD;&#xA;        {&#xD;&#xA;            var id = Identity(entity);&#xD;&#xA;            map.Remove&lt;Dinner&gt;(id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public void Delete(IIdentityMap map, object id)&#xD;&#xA;        {&#xD;&#xA;            map.Remove&lt;Dinner&gt;(id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public void Store(IIdentityMap map, object id, object entity)&#xD;&#xA;        {&#xD;&#xA;            map.Store&lt;Dinner&gt;(id, (Dinner)entity);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public object Assign(Dinner document, out bool assigned)&#xD;&#xA;        {&#xD;&#xA;            document.Id = &quot;4ff5775a51bd49ef8da0ae9f58d606b2&quot;&#xD;&#xA;            return document.Id;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public void Assign(Dinner document, object id)&#xD;&#xA;        {&#xD;&#xA;            document.Id = (System.String)id;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public object Retrieve(Dinner document)&#xD;&#xA;        {&#xD;&#xA;            return document.Id;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public NpgsqlDbType IdType =&gt; NpgsqlDbType.Text;&#xD;&#xA;&#xD;&#xA;        public object Identity(object document)&#xD;&#xA;        {&#xD;&#xA;            return ((Dinner)document).Id;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public void RegisterUpdate(UpdateBatch batch, object entity)&#xD;&#xA;        {&#xD;&#xA;            var document = (Dinner)entity;&#xD;&#xA;            var function = new FunctionName(&quot;public&quot;, &quot;mt_upsert_dinner&quot;);&#xD;&#xA;            batch.Sproc(function).JsonEntity(&quot;doc&quot;, document).Param(&quot;docId&quot;, document.Id, NpgsqlDbType.Text);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public void RegisterUpdate(UpdateBatch batch, object entity, string json)&#xD;&#xA;        {&#xD;&#xA;            var document = (Dinner)entity;&#xD;&#xA;            var function = new FunctionName(&quot;public&quot;, &quot;mt_upsert_dinner&quot;);&#xD;&#xA;            batch.Sproc(function).JsonBody(&quot;doc&quot;, json).Param(&quot;docId&quot;, document.Id, NpgsqlDbType.Text);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public void Load(ISerializer serializer, NpgsqlConnection conn, IEnumerable&lt;Dinner&gt; documents)&#xD;&#xA;        {&#xD;&#xA;            using (var writer = conn.BeginBinaryImport(&quot;COPY public.mt_doc_dinner(\&quot;data\&quot;, \&quot;id\&quot;) FROM STDIN BINARY&quot;))&#xD;&#xA;            {&#xD;&#xA;                foreach (var x in documents)&#xD;&#xA;                {&#xD;&#xA;                    bool assigned = false;&#xD;&#xA;                    Assign(x, out assigned);&#xD;&#xA;                    writer.StartRow();&#xD;&#xA;                    writer.Write(serializer.ToJson(x), NpgsqlDbType.Jsonb);&#xD;&#xA;                    writer.Write(x.Id, NpgsqlDbType.Text);&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;   at Marten.Codegen.AssemblyGenerator.Generate(String code)&#xD;&#xA;   at Marten.Schema.DocumentStorageBuilder.Build(IDocumentSchema schema, DocumentMapping[] mappings)&#xD;&#xA;   at Marten.Schema.DocumentStorageBuilder.Build(IDocumentSchema schema, DocumentMapping mapping)&#xD;&#xA;   at Marten.Schema.DocumentSchema.&lt;&gt;c__DisplayClass14_0.&lt;StorageFor&gt;b__0(Type type)&#xD;&#xA;   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)&#xD;&#xA;   at Marten.DocumentSession.Store[T](T[] entities)&#xD;&#xA;   at DinnerParty.Modules.DinnerModuleAuth.&lt;&gt;c__DisplayClass0_0.&lt;.ctor&gt;b__1(Object parameters) in C:\Users\codin\Github\DinnerParty\src\Modules\DinnerModule.cs:line 119&#xD;&#xA;   at Nancy.Routing.Route.&lt;&gt;c__DisplayClass4.&lt;Wrap&gt;b__3(Object parameters, CancellationToken context)" time="2016-05-03T14:21:08.6452516Z">
  <serverVariables>
    <item name="ALL_HTTP">
      <value string="HTTP_CACHE_CONTROL:no-cache&#xD;&#xA;HTTP_CONNECTION:Keep-Alive&#xD;&#xA;HTTP_CONTENT_LENGTH:245&#xD;&#xA;HTTP_CONTENT_TYPE:application/x-www-form-urlencoded&#xD;&#xA;HTTP_ACCEPT:text/html, application/xhtml+xml, image/jxr, */*&#xD;&#xA;HTTP_ACCEPT_ENCODING:gzip, deflate&#xD;&#xA;HTTP_ACCEPT_LANGUAGE:en-US,en;q=0.5&#xD;&#xA;HTTP_COOKIE:_ncfa=ORyh8PhWMyX12QOHD71nAXVMf2OlsEofvBHt%2bVkPQI0%3d52bhdiYE5wGMct%2f29NiAzGXq8LSlgqWjDSGkt9MH8uyi1wZUosKeV3OfN5BoflZE&#xD;&#xA;HTTP_HOST:localhost:63155&#xD;&#xA;HTTP_REFERER:http://localhost:63155/Dinners/Create&#xD;&#xA;HTTP_USER_AGENT:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36 Edge/14.14332&#xD;&#xA;" />
    </item>
    <item name="ALL_RAW">
      <value string="Cache-Control: no-cache&#xD;&#xA;Connection: Keep-Alive&#xD;&#xA;Content-Length: 245&#xD;&#xA;Content-Type: application/x-www-form-urlencoded&#xD;&#xA;Accept: text/html, application/xhtml+xml, image/jxr, */*&#xD;&#xA;Accept-Encoding: gzip, deflate&#xD;&#xA;Accept-Language: en-US,en;q=0.5&#xD;&#xA;Cookie: _ncfa=ORyh8PhWMyX12QOHD71nAXVMf2OlsEofvBHt%2bVkPQI0%3d52bhdiYE5wGMct%2f29NiAzGXq8LSlgqWjDSGkt9MH8uyi1wZUosKeV3OfN5BoflZE&#xD;&#xA;Host: localhost:63155&#xD;&#xA;Referer: http://localhost:63155/Dinners/Create&#xD;&#xA;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36 Edge/14.14332&#xD;&#xA;" />
    </item>
    <item name="APPL_MD_PATH">
      <value string="/LM/W3SVC/2/ROOT" />
    </item>
    <item name="APPL_PHYSICAL_PATH">
      <value string="C:\Users\codin\Github\DinnerParty\src\" />
    </item>
    <item name="AUTH_TYPE">
      <value string="" />
    </item>
    <item name="AUTH_USER">
      <value string="" />
    </item>
    <item name="AUTH_PASSWORD">
      <value string="*****" />
    </item>
    <item name="LOGON_USER">
      <value string="" />
    </item>
    <item name="REMOTE_USER">
      <value string="" />
    </item>
    <item name="CERT_COOKIE">
      <value string="" />
    </item>
    <item name="CERT_FLAGS">
      <value string="" />
    </item>
    <item name="CERT_ISSUER">
      <value string="" />
    </item>
    <item name="CERT_KEYSIZE">
      <value string="" />
    </item>
    <item name="CERT_SECRETKEYSIZE">
      <value string="" />
    </item>
    <item name="CERT_SERIALNUMBER">
      <value string="" />
    </item>
    <item name="CERT_SERVER_ISSUER">
      <value string="" />
    </item>
    <item name="CERT_SERVER_SUBJECT">
      <value string="" />
    </item>
    <item name="CERT_SUBJECT">
      <value string="" />
    </item>
    <item name="CONTENT_LENGTH">
      <value string="245" />
    </item>
    <item name="CONTENT_TYPE">
      <value string="application/x-www-form-urlencoded" />
    </item>
    <item name="GATEWAY_INTERFACE">
      <value string="CGI/1.1" />
    </item>
    <item name="HTTPS">
      <value string="off" />
    </item>
    <item name="HTTPS_KEYSIZE">
      <value string="" />
    </item>
    <item name="HTTPS_SECRETKEYSIZE">
      <value string="" />
    </item>
    <item name="HTTPS_SERVER_ISSUER">
      <value string="" />
    </item>
    <item name="HTTPS_SERVER_SUBJECT">
      <value string="" />
    </item>
    <item name="INSTANCE_ID">
      <value string="2" />
    </item>
    <item name="INSTANCE_META_PATH">
      <value string="/LM/W3SVC/2" />
    </item>
    <item name="LOCAL_ADDR">
      <value string="::1" />
    </item>
    <item name="PATH_INFO">
      <value string="/Dinners/Create" />
    </item>
    <item name="PATH_TRANSLATED">
      <value string="C:\Users\codin\Github\DinnerParty\src\Dinners\Create" />
    </item>
    <item name="QUERY_STRING">
      <value string="" />
    </item>
    <item name="REMOTE_ADDR">
      <value string="::1" />
    </item>
    <item name="REMOTE_HOST">
      <value string="::1" />
    </item>
    <item name="REMOTE_PORT">
      <value string="19061" />
    </item>
    <item name="REQUEST_METHOD">
      <value string="POST" />
    </item>
    <item name="SCRIPT_NAME">
      <value string="/Dinners/Create" />
    </item>
    <item name="SERVER_NAME">
      <value string="localhost" />
    </item>
    <item name="SERVER_PORT">
      <value string="63155" />
    </item>
    <item name="SERVER_PORT_SECURE">
      <value string="0" />
    </item>
    <item name="SERVER_PROTOCOL">
      <value string="HTTP/1.1" />
    </item>
    <item name="SERVER_SOFTWARE">
      <value string="Microsoft-IIS/10.0" />
    </item>
    <item name="URL">
      <value string="/Dinners/Create" />
    </item>
    <item name="HTTP_CACHE_CONTROL">
      <value string="no-cache" />
    </item>
    <item name="HTTP_CONNECTION">
      <value string="Keep-Alive" />
    </item>
    <item name="HTTP_CONTENT_LENGTH">
      <value string="245" />
    </item>
    <item name="HTTP_CONTENT_TYPE">
      <value string="application/x-www-form-urlencoded" />
    </item>
    <item name="HTTP_ACCEPT">
      <value string="text/html, application/xhtml+xml, image/jxr, */*" />
    </item>
    <item name="HTTP_ACCEPT_ENCODING">
      <value string="gzip, deflate" />
    </item>
    <item name="HTTP_ACCEPT_LANGUAGE">
      <value string="en-US,en;q=0.5" />
    </item>
    <item name="HTTP_COOKIE">
      <value string="_ncfa=ORyh8PhWMyX12QOHD71nAXVMf2OlsEofvBHt%2bVkPQI0%3d52bhdiYE5wGMct%2f29NiAzGXq8LSlgqWjDSGkt9MH8uyi1wZUosKeV3OfN5BoflZE" />
    </item>
    <item name="HTTP_HOST">
      <value string="localhost:63155" />
    </item>
    <item name="HTTP_REFERER">
      <value string="http://localhost:63155/Dinners/Create" />
    </item>
    <item name="HTTP_USER_AGENT">
      <value string="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36 Edge/14.14332" />
    </item>
  </serverVariables>
  <form>
    <item name="Title">
      <value string="Mark's Fancy Dinner" />
    </item>
    <item name="EventDate">
      <value string="10/05/2016 10:20:49" />
    </item>
    <item name="Description">
      <value string="This is a test dinner" />
    </item>
    <item name="HostedBy">
      <value string="Mark Warpool" />
    </item>
    <item name="ContactPhone">
      <value string="4195081019" />
    </item>
    <item name="Address">
      <value string="10062 Sanger Drive, Fishers, IN, 46038" />
    </item>
    <item name="Country">
      <value string="USA" />
    </item>
    <item name="Latitude">
      <value string="0" />
    </item>
    <item name="Longitude">
      <value string="0" />
    </item>
    <item name="HostedById">
      <value string="" />
    </item>
  </form>
  <cookies>
    <item name="_ncfa">
      <value string="ORyh8PhWMyX12QOHD71nAXVMf2OlsEofvBHt%2bVkPQI0%3d52bhdiYE5wGMct%2f29NiAzGXq8LSlgqWjDSGkt9MH8uyi1wZUosKeV3OfN5BoflZE" />
    </item>
  </cookies>
</error>